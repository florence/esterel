#lang racket
(provide (all-defined-out))
(require (for-syntax syntax/parse))
(define-syntax (define-dt stx)
  (syntax-parse stx
    [(_ base (ba ...) (name (args ...)) ...)
     #'(begin (struct base (ba ...) #:transparent)
              (struct name base (args ...) #:transparent) ...)]))


(define-dt ast (selected?)
  (nothing ())
  (pause ())
  (seq (left right))
  (par (left right))
  (suspend (S p))
  (loop (p))
  (signal (S p))
  (emit (S))
  (present (S then else))
  ;; TODO the t is actually not needed
  (trap (T p))
  (exit (N T))
  (sel (p)))

(define (make-nothing)
  (nothing #f))
(define (make-pause)
  (pause #f))
(define (make-seq left right)
  (seq (or (ast-selected? left)
                (ast-selected? right))
            left right))
(define (make-par left right)
  (par (or (ast-selected? left)
           (ast-selected? right))
       left right))
(define (make-suspend S p)
  (suspend (ast-selected? p) S p))
(define (make-loop p)
  (loop (ast-selected? p) p))
(define (make-signal S p)
  (signal (ast-selected? p) S p))
(define (make-emit S)
  (emit #f S))
(define (make-present S then else)
  (present (or (ast-selected? then)
               (ast-selected? else))
           S then else))
(define (make-trap T p)
  (trap (ast-selected? p)
        T p))
(define (make-exit N T)
  (exit #f N T))
(define (make-sel p)
  (sel #t p))

(define-dt presence (S)
  (:present ())
  (:absent ())
  (:unknown ()))
